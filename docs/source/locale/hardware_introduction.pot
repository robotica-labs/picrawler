# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, SunFounder
# This file is distributed under the same license as the SunFounder Robot HAT package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Robot HAT \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-23 17:47+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../hardware_introduction.rst:3
msgid "Hello, welcome to the SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts Community on Facebook! Dive deeper into Raspberry Pi, Arduino, and ESP32 with fellow enthusiasts."
msgstr ""

#: ../hardware_introduction.rst:5
msgid "**Why Join?**"
msgstr ""

#: ../hardware_introduction.rst:7
msgid "**Expert Support**: Solve post-sale issues and technical challenges with help from our community and team."
msgstr ""

#: ../hardware_introduction.rst:8
msgid "**Learn & Share**: Exchange tips and tutorials to enhance your skills."
msgstr ""

#: ../hardware_introduction.rst:9
msgid "**Exclusive Previews**: Get early access to new product announcements and sneak peeks."
msgstr ""

#: ../hardware_introduction.rst:10
msgid "**Special Discounts**: Enjoy exclusive discounts on our newest products."
msgstr ""

#: ../hardware_introduction.rst:11
msgid "**Festive Promotions and Giveaways**: Take part in giveaways and holiday promotions."
msgstr ""

#: ../hardware_introduction.rst:13
msgid "üëâ Ready to explore and create with us? Click [|link_sf_facebook|] and join today!"
msgstr ""

#: ../hardware_introduction.rst:16
msgid "Hardware Introduction"
msgstr ""

#: ../hardware_introduction.rst:18
msgid "The Robot Hat V4 features 2 lithium battery charging, 5V/3A DC-DC discharge, I2S audio output and speaker, a simple battery level indicator, microcontroller-based PWM and ADC drivers, as well as motor drivers."
msgstr ""

#: ../hardware_introduction.rst:21
msgid "Pinout"
msgstr ""

#: ../hardware_introduction.rst:29
msgid "**Power Port**"
msgstr ""

#: ../hardware_introduction.rst:28
msgid "7-12V PH2.0 2pin power input."
msgstr ""

#: ../hardware_introduction.rst:29
msgid "Powering the Raspberry Pi and Robot HAT at the same time."
msgstr ""

#: ../hardware_introduction.rst:33
msgid "**Power Switch**"
msgstr ""

#: ../hardware_introduction.rst:32
msgid "Turn on/off the power of the robot HAT."
msgstr ""

#: ../hardware_introduction.rst:33
msgid "When you connect power to the power port, the Raspberry Pi will boot up. However, you will need to switch the power switch to ON to enable Robot HAT."
msgstr ""

#: ../hardware_introduction.rst:36
msgid "**Type-C USB Port**"
msgstr ""

#: ../hardware_introduction.rst:36
msgid "Insert the Type-C cable to charge the battery."
msgstr ""

#: ../hardware_introduction.rst:41
msgid "**Digital Pin**"
msgstr ""

#: ../hardware_introduction.rst:39
msgid "4-channel digital pins, D0-D3."
msgstr ""

#: ../hardware_introduction.rst:40
msgid "Pin: :ref:`pin_digital`."
msgstr ""

#: ../hardware_introduction.rst:41
msgid "API: :ref:`class_pin`."
msgstr ""

#: ../hardware_introduction.rst:46
msgid "**ADC Pin**"
msgstr ""

#: ../hardware_introduction.rst:44
msgid "4-channel ADC pins, A0-A3."
msgstr ""

#: ../hardware_introduction.rst:45
msgid "Pin: :ref:`pin_adc`."
msgstr ""

#: ../hardware_introduction.rst:46
msgid "API: :ref:`class_adc`."
msgstr ""

#: ../hardware_introduction.rst:51
msgid "**PWM Pin**"
msgstr ""

#: ../hardware_introduction.rst:49
msgid "12-channel PWM pins, P0-P11."
msgstr ""

#: ../hardware_introduction.rst:50
msgid "Pin: :ref:`pin_pwm`."
msgstr ""

#: ../hardware_introduction.rst:51
msgid "API: :ref:`class_pwm`."
msgstr ""

#: ../hardware_introduction.rst:57
msgid "**Left/Right Motor Port**"
msgstr ""

#: ../hardware_introduction.rst:54
msgid "2-channel XH2.54 motor ports."
msgstr ""

#: ../hardware_introduction.rst:55
msgid "The left port is connected to GPIO 4 and the right port is connected to GPIO 5."
msgstr ""

#: ../hardware_introduction.rst:56
msgid "Pin: :ref:`pin_motor`."
msgstr ""

#: ../hardware_introduction.rst:57
msgid "API: :ref:`class_motor`, ``0`` for left motor port, ``1`` for right motor port."
msgstr ""

#: ../hardware_introduction.rst:62
msgid "**I2C Pin and I2C Port**"
msgstr ""

#: ../hardware_introduction.rst:60
#: ../hardware_introduction.rst:65
#: ../hardware_introduction.rst:69
msgid "2-channel I2C pins from Raspberry Pi."
msgstr ""

#: ../hardware_introduction.rst:61
msgid "Pin: :ref:`pin_i2c`."
msgstr ""

#: ../hardware_introduction.rst:62
msgid "API: :ref:`class_i2c`."
msgstr ""

#: ../hardware_introduction.rst:66
msgid "**SPI Pin**"
msgstr ""

#: ../hardware_introduction.rst:66
msgid "Pin: :ref:`pin_spi`."
msgstr ""

#: ../hardware_introduction.rst:70
msgid "**UART Pin**"
msgstr ""

#: ../hardware_introduction.rst:70
msgid "Pin: :ref:`pin_uart`."
msgstr ""

#: ../hardware_introduction.rst:75
msgid "**RST Button**"
msgstr ""

#: ../hardware_introduction.rst:73
msgid "Short pressing RST Button causes program resetting."
msgstr ""

#: ../hardware_introduction.rst:74
msgid "Long press RST Button till the LED lights up then release, and you will disconnect the Bluetooth."
msgstr ""

#: ../hardware_introduction.rst:75
#: ../hardware_introduction.rst:80
msgid "Pin: :ref:`pin_button`."
msgstr ""

#: ../hardware_introduction.rst:80
msgid "**USR Button**"
msgstr ""

#: ../hardware_introduction.rst:78
msgid "The functions of USR Button can be set by your programming. (Pressing down leads to a input ‚Äú0‚Äù; releasing produces a input ‚Äú1‚Äù. )"
msgstr ""

#: ../hardware_introduction.rst:79
msgid "API: :ref:`class_pin`, you can use ``Pin(\"SW\")`` to define it."
msgstr ""

#: ../hardware_introduction.rst:85
msgid "**Battery Indicator**"
msgstr ""

#: ../hardware_introduction.rst:83
msgid "Two LEDs light up when the voltage is higher than 7.8V."
msgstr ""

#: ../hardware_introduction.rst:84
msgid "One LED lights up in the 6.7V to 7.8V range."
msgstr ""

#: ../hardware_introduction.rst:85
msgid "Below 6.7V, both LEDs turn off."
msgstr ""

#: ../hardware_introduction.rst:91
msgid "**Speaker and Speaker Port**"
msgstr ""

#: ../hardware_introduction.rst:88
msgid "Speaker: This is a 2030 audio chamber speaker."
msgstr ""

#: ../hardware_introduction.rst:89
msgid "Speaker Port: The Robot HAT is equipped with onboard I2S audio output, along with a 2030 audio chamber speaker, providing a mono sound output."
msgstr ""

#: ../hardware_introduction.rst:90
msgid "Pin: :ref:`pin_speaker`."
msgstr ""

#: ../hardware_introduction.rst:94
msgid "Pin Mapping"
msgstr ""

#: ../hardware_introduction.rst:96
msgid "Raspberry Pi IO"
msgstr ""

#: ../hardware_introduction.rst:100
#: ../hardware_introduction.rst:102
#: ../hardware_introduction.rst:268
#: ../hardware_introduction.rst:340
#: ../hardware_introduction.rst:379
msgid "Robot Hat V4"
msgstr ""

#: ../hardware_introduction.rst:101
#: ../hardware_introduction.rst:103
#: ../hardware_introduction.rst:269
#: ../hardware_introduction.rst:341
#: ../hardware_introduction.rst:380
#: ../hardware_introduction.rst:401
msgid "Raspberry Pi"
msgstr ""

#: ../hardware_introduction.rst:104
#: ../hardware_introduction.rst:136
#: ../hardware_introduction.rst:154
#: ../hardware_introduction.rst:156
#: ../hardware_introduction.rst:158
#: ../hardware_introduction.rst:178
msgid "NC"
msgstr ""

#: ../hardware_introduction.rst:105
#: ../hardware_introduction.rst:137
#: ../hardware_introduction.rst:352
msgid "3V3"
msgstr ""

#: ../hardware_introduction.rst:106
#: ../hardware_introduction.rst:107
#: ../hardware_introduction.rst:110
#: ../hardware_introduction.rst:111
msgid "5V"
msgstr ""

#: ../hardware_introduction.rst:108
#: ../hardware_introduction.rst:109
msgid "SDA"
msgstr ""

#: ../hardware_introduction.rst:112
#: ../hardware_introduction.rst:113
msgid "SCL"
msgstr ""

#: ../hardware_introduction.rst:114
#: ../hardware_introduction.rst:115
#: ../hardware_introduction.rst:120
#: ../hardware_introduction.rst:121
#: ../hardware_introduction.rst:130
#: ../hardware_introduction.rst:131
#: ../hardware_introduction.rst:142
#: ../hardware_introduction.rst:143
#: ../hardware_introduction.rst:152
#: ../hardware_introduction.rst:153
#: ../hardware_introduction.rst:162
#: ../hardware_introduction.rst:163
#: ../hardware_introduction.rst:170
#: ../hardware_introduction.rst:171
#: ../hardware_introduction.rst:180
#: ../hardware_introduction.rst:181
#: ../hardware_introduction.rst:354
msgid "GND"
msgstr ""

#: ../hardware_introduction.rst:116
#: ../hardware_introduction.rst:274
msgid "D1"
msgstr ""

#: ../hardware_introduction.rst:117
#: ../hardware_introduction.rst:275
msgid "GPIO4"
msgstr ""

#: ../hardware_introduction.rst:118
#: ../hardware_introduction.rst:119
msgid "TXD"
msgstr ""

#: ../hardware_introduction.rst:122
#: ../hardware_introduction.rst:123
msgid "RXD"
msgstr ""

#: ../hardware_introduction.rst:124
#: ../hardware_introduction.rst:271
msgid "D0"
msgstr ""

#: ../hardware_introduction.rst:125
#: ../hardware_introduction.rst:272
msgid "GPIO17"
msgstr ""

#: ../hardware_introduction.rst:126
msgid "I2S BCLK"
msgstr ""

#: ../hardware_introduction.rst:127
#: ../hardware_introduction.rst:405
msgid "GPIO18"
msgstr ""

#: ../hardware_introduction.rst:128
#: ../hardware_introduction.rst:277
msgid "D2"
msgstr ""

#: ../hardware_introduction.rst:129
#: ../hardware_introduction.rst:278
msgid "GPIO27"
msgstr ""

#: ../hardware_introduction.rst:132
#: ../hardware_introduction.rst:280
msgid "D3"
msgstr ""

#: ../hardware_introduction.rst:133
#: ../hardware_introduction.rst:281
msgid "GPIO22"
msgstr ""

#: ../hardware_introduction.rst:134
msgid "MOTOR 1 DIR"
msgstr ""

#: ../hardware_introduction.rst:135
#: ../hardware_introduction.rst:424
msgid "GPIO23"
msgstr ""

#: ../hardware_introduction.rst:138
msgid "MOTOR 2 DIR"
msgstr ""

#: ../hardware_introduction.rst:139
#: ../hardware_introduction.rst:428
msgid "GPIO24"
msgstr ""

#: ../hardware_introduction.rst:140
msgid "SPI MOSI"
msgstr ""

#: ../hardware_introduction.rst:141
msgid "MOSI"
msgstr ""

#: ../hardware_introduction.rst:144
msgid "SPI MISO"
msgstr ""

#: ../hardware_introduction.rst:145
msgid "MISO"
msgstr ""

#: ../hardware_introduction.rst:146
msgid "USR BUTTON"
msgstr ""

#: ../hardware_introduction.rst:147
#: ../hardware_introduction.rst:384
msgid "GPIO25"
msgstr ""

#: ../hardware_introduction.rst:148
msgid "SPI SCLK"
msgstr ""

#: ../hardware_introduction.rst:149
msgid "SCLK"
msgstr ""

#: ../hardware_introduction.rst:150
msgid "SPI CE0"
msgstr ""

#: ../hardware_introduction.rst:151
msgid "CE0"
msgstr ""

#: ../hardware_introduction.rst:155
msgid "CE1"
msgstr ""

#: ../hardware_introduction.rst:157
msgid "ID_SD"
msgstr ""

#: ../hardware_introduction.rst:159
msgid "ID_SC"
msgstr ""

#: ../hardware_introduction.rst:160
msgid "MCU Reset"
msgstr ""

#: ../hardware_introduction.rst:161
msgid "GPIO5"
msgstr ""

#: ../hardware_introduction.rst:164
msgid "(SPI)BSY"
msgstr ""

#: ../hardware_introduction.rst:165
#: ../hardware_introduction.rst:343
msgid "GPIO6"
msgstr ""

#: ../hardware_introduction.rst:166
msgid "Board Identifier 2"
msgstr ""

#: ../hardware_introduction.rst:167
msgid "GPIO12"
msgstr ""

#: ../hardware_introduction.rst:168
msgid "Board Identifier 1"
msgstr ""

#: ../hardware_introduction.rst:169
msgid "GPIO13"
msgstr ""

#: ../hardware_introduction.rst:172
msgid "I2S LRCLK"
msgstr ""

#: ../hardware_introduction.rst:173
#: ../hardware_introduction.rst:403
msgid "GPIO19"
msgstr ""

#: ../hardware_introduction.rst:174
msgid "RST BUTTON"
msgstr ""

#: ../hardware_introduction.rst:175
#: ../hardware_introduction.rst:386
msgid "GPIO16"
msgstr ""

#: ../hardware_introduction.rst:176
msgid "USER LED"
msgstr ""

#: ../hardware_introduction.rst:177
#: ../hardware_introduction.rst:382
msgid "GPIO26"
msgstr ""

#: ../hardware_introduction.rst:179
msgid "GPIO20"
msgstr ""

#: ../hardware_introduction.rst:182
msgid "I2S SDATA"
msgstr ""

#: ../hardware_introduction.rst:183
#: ../hardware_introduction.rst:407
msgid "GPIO21"
msgstr ""

#: ../hardware_introduction.rst:188
msgid "Onboard Microcontroller"
msgstr ""

#: ../hardware_introduction.rst:190
msgid "The Robot HAT comes with an AT32F415CBT7 microcontroller from Artery. It is an ARM Cortex-M4 processor with a maximum clock frequency of 150MHz. The microcontroller has 256KB of Flash memory and 32KB of SRAM."
msgstr ""

#: ../hardware_introduction.rst:194
msgid "The onboard PWM and ADC are driven by the microcontroller. Communication between the Raspberry Pi and the microcontroller is established via the I2C interface. The I2C address used for communication is 0x14 (7-bit address format)."
msgstr ""

#: ../hardware_introduction.rst:198
msgid "Register:"
msgstr ""

#: ../hardware_introduction.rst:208
msgid "ADC Read Value (0x10-0x17)"
msgstr ""

#: ../hardware_introduction.rst:201
msgid "Reads the value of the ADC. Data is read back in 16-bit format [MSB], [LSB]. 0x17: ADC 0 0x16: ADC 1 ... 0x13: ADC 4 0x12: ADC 5 (Reserved) 0x11: ADC 6 (Reserved) 0x10: ADC 7 (Reserved)"
msgstr ""

#: ../hardware_introduction.rst:217
msgid "PWM Pulse Width (0x20-0x2D)"
msgstr ""

#: ../hardware_introduction.rst:211
msgid "Sets the PWM pulse width. Data is written in 16-bit format [MSB], [LSB]. 0x20: PWM 0 0x21: PWM 1 ... 0x2B: PWM 11 0x2C: PWM 12 (Motor) 0x2D: PWM 13 (Motor)"
msgstr ""

#: ../hardware_introduction.rst:224
msgid "PWM Prescaler (0x40-0x43)"
msgstr ""

#: ../hardware_introduction.rst:220
msgid "Sets the prescaler for PWM. Data is written in 16-bit format [MSB], [LSB]. 0x40: PWM Channel 0 0x41: PWM Channel 1 0x42: PWM Channel 2 0x43: PWM Channel 3"
msgstr ""

#: ../hardware_introduction.rst:231
msgid "PWM Period (0x44-0x47)"
msgstr ""

#: ../hardware_introduction.rst:227
msgid "Sets the period of the PWM. Data is written in 16-bit format [MSB], [LSB]. 0x44: PWM Channel 0 0x45: PWM Channel 1 0x46: PWM Channel 2 0x47: PWM Channel 3"
msgstr ""

#: ../hardware_introduction.rst:233
msgid "**PWM Frequency and Period Setting**"
msgstr ""

#: ../hardware_introduction.rst:235
msgid "The PWM frequency is determined by the period (Period) and the prescaler (ARR). The principle is based on an internal clock of the microcontroller running at 72MHz. By dividing the clock with the prescaler, we obtain a frequency (Fp). Then, by dividing Fp with the period, we can calculate the desired frequency (F). Therefore:"
msgstr ""

#: ../hardware_introduction.rst:237
msgid "F = 72000000 / ARR / Period"
msgstr ""

#: ../hardware_introduction.rst:239
msgid "In general, we determine the frequency and period to calculate the prescaler. For example, if you need to drive a servo motor with a frequency of 50Hz and a precision of 12 bits (period of 2^12, which is 4096), you can calculate the prescaler (ARR) as follows:"
msgstr ""

#: ../hardware_introduction.rst:241
msgid "ARR = 72000000 / F * Period = 72000000 / 50 / 4096 = 351.6525 ‚âà 352"
msgstr ""

#: ../hardware_introduction.rst:246
msgid "Since ARR needs to be an integer, it will be rounded to 352. Therefore, you can set ARR as 352 and Period as 4096 to achieve an actual PWM frequency of approximately 49.937Hz, which is close to 50Hz."
msgstr ""

#: ../hardware_introduction.rst:248
msgid "The default values for the PWM prescaler (ARR) and period (Period) are 352 and 4096, respectively, resulting in a default frequency of 50Hz."
msgstr ""

#: ../hardware_introduction.rst:250
msgid "**PWM Pulse Width**"
msgstr ""

#: ../hardware_introduction.rst:252
msgid "The pulse width corresponds to the number of periods. For example, if the period (Period) is set to 4096, and you set the pulse width value to 2048, you will achieve a 50% PWM output."
msgstr ""

#: ../hardware_introduction.rst:258
#: ../hardware_introduction.rst:264
msgid "Digital IO"
msgstr ""

#: ../hardware_introduction.rst:260
msgid "Robot HAT has 4 sets of 3Pin digital pins."
msgstr ""

#: ../hardware_introduction.rst:286
msgid "ADC"
msgstr ""

#: ../hardware_introduction.rst:290
msgid "The Robot HAT features four sets of 3Pin ADC (Analog to Digital Converter) pins, each spaced 2.54mm apart. These pins operate at a 3.3V power supply. The ADC function, offering 12-bit precision, is facilitated by an onboard microcontroller. Detailed instructions for reading ADC values are provided in the \"Onboard Microcontroller\" section."
msgstr ""

#: ../hardware_introduction.rst:294
msgid "Also, ADC channel A4 is connected to the battery through a voltage divider using resistors, which will be used to measure the battery voltage to estimate the approximate battery charge."
msgstr ""

#: ../hardware_introduction.rst:297
msgid "The voltage divider ratio is 20K/10K, so: A4 voltage (Va4) = value_A4 / 4095.0 * 3.3 Battery voltage (Vbat) = Va4*3 Battery voltage (Vbat) = value_A4 / 4095.0 * 3.3 * 3"
msgstr ""

#: ../hardware_introduction.rst:305
msgid "PWM"
msgstr ""

#: ../hardware_introduction.rst:309
msgid "Robot HAT has 4 sets of 3Pin ADC pins of P2.54, and the power supply is 5V. The method of using the PWM is described in detail in :ref:`pin_mocrocontroller`."
msgstr ""

#: ../hardware_introduction.rst:312
msgid "PWM13 & 14 channels are used for motor drive."
msgstr ""

#: ../hardware_introduction.rst:317
msgid "I2C"
msgstr ""

#: ../hardware_introduction.rst:321
msgid "The Robot HAT has two I2C interfaces. One is the P2.54 4-pin interface, and the other is the SH1.0 4-pin interface, which is compatible with QWIIC and STEMMA QT. These I2C interfaces are connected to the Raspberry Pi's I2C interface via GPIO2 (SDA) and GPIO3 (SCL). The board also features an :ref:`pin_mocrocontroller`, and the two signal lines have 10K pull-up resistors."
msgstr ""

#: ../hardware_introduction.rst:328
#: ../hardware_introduction.rst:336
msgid "SPI"
msgstr ""

#: ../hardware_introduction.rst:332
msgid "The SPI interface of the Robot HAT is a 7-pin P2.54 interface. It connects to the SPI interface of the Raspberry Pi and includes an additional I/O pin that can be used for purposes such as interrupts or resets."
msgstr ""

#: ../hardware_introduction.rst:342
msgid "BSY"
msgstr ""

#: ../hardware_introduction.rst:344
msgid "CS"
msgstr ""

#: ../hardware_introduction.rst:345
msgid "CE0(GPIO8)"
msgstr ""

#: ../hardware_introduction.rst:346
msgid "SCK"
msgstr ""

#: ../hardware_introduction.rst:347
msgid "SCLK(GPIO11)"
msgstr ""

#: ../hardware_introduction.rst:348
msgid "MI"
msgstr ""

#: ../hardware_introduction.rst:349
msgid "MISO(GPIO9)"
msgstr ""

#: ../hardware_introduction.rst:350
msgid "MO"
msgstr ""

#: ../hardware_introduction.rst:351
msgid "MOSI(GPIO10)"
msgstr ""

#: ../hardware_introduction.rst:353
msgid "3.3V Power"
msgstr ""

#: ../hardware_introduction.rst:355
msgid "Ground"
msgstr ""

#: ../hardware_introduction.rst:360
msgid "UART"
msgstr ""

#: ../hardware_introduction.rst:364
msgid "The UART interface of the Robot HAT is a 4-pin P2.54 interface. It connects to the Raspberry Pi's GPIO14 (TXD) and GPIO15 (RXD) pins."
msgstr ""

#: ../hardware_introduction.rst:369
msgid "Buttons"
msgstr ""

#: ../hardware_introduction.rst:371
msgid "The Robot HAT comes with 1 LED and 2 buttons, all directly connected to the Raspberry Pi's GPIO pins. The RST button, when using Ezblock, serves as a button to restart the Ezblock program. If not using Ezblock, the RST button does not have a predefined function and can be fully customized according to your needs."
msgstr ""

#: ../hardware_introduction.rst:375
msgid "LED & Button"
msgstr ""

#: ../hardware_introduction.rst:381
msgid "LED"
msgstr ""

#: ../hardware_introduction.rst:383
msgid "USR"
msgstr ""

#: ../hardware_introduction.rst:385
msgid "RST"
msgstr ""

#: ../hardware_introduction.rst:391
msgid "Speaker and Speaker Port"
msgstr ""

#: ../hardware_introduction.rst:393
msgid "The Robot HAT is equipped with onboard I2S audio output, along with a 2030 audio chamber speaker, providing a mono sound output."
msgstr ""

#: ../hardware_introduction.rst:396
#: ../hardware_introduction.rst:400
msgid "I2S"
msgstr ""

#: ../hardware_introduction.rst:402
msgid "LRCLK"
msgstr ""

#: ../hardware_introduction.rst:404
msgid "BCLK"
msgstr ""

#: ../hardware_introduction.rst:406
msgid "SDATA"
msgstr ""

#: ../hardware_introduction.rst:412
msgid "Motor Port"
msgstr ""

#: ../hardware_introduction.rst:414
msgid "The motor driver of the Robot HAT supports 2 channels and can be controlled using 2 digital signals for direction and 2 PWM signals for speed control."
msgstr ""

#: ../hardware_introduction.rst:417
msgid "Motor Driver"
msgstr ""

#: ../hardware_introduction.rst:421
msgid "Motor"
msgstr ""

#: ../hardware_introduction.rst:422
msgid "IO"
msgstr ""

#: ../hardware_introduction.rst:423
msgid "Motor1 Dir"
msgstr ""

#: ../hardware_introduction.rst:425
msgid "Motor1 Power"
msgstr ""

#: ../hardware_introduction.rst:426
msgid "PWM13"
msgstr ""

#: ../hardware_introduction.rst:427
msgid "Motor2 Dir"
msgstr ""

#: ../hardware_introduction.rst:429
msgid "Motor2 Power"
msgstr ""

#: ../hardware_introduction.rst:430
msgid "PWM12"
msgstr ""

#: ../hardware_introduction.rst:434
msgid "Battery Level Indicator"
msgstr ""

#: ../hardware_introduction.rst:436
msgid "The battery level indicator on the Robot HAT monitors the battery voltage using a voltage divider method and serves as a reference for estimating the battery level. The relationship between the LED and voltage is as follows:"
msgstr ""

#: ../hardware_introduction.rst:439
msgid "Battery Level"
msgstr ""

#: ../hardware_introduction.rst:443
msgid "LED Battery"
msgstr ""

#: ../hardware_introduction.rst:444
msgid "Total Voltage"
msgstr ""

#: ../hardware_introduction.rst:445
msgid "2 LEDs on"
msgstr ""

#: ../hardware_introduction.rst:446
msgid "Greater than 7.6V"
msgstr ""

#: ../hardware_introduction.rst:447
msgid "1 LED on"
msgstr ""

#: ../hardware_introduction.rst:448
msgid "Greater than 7.15V"
msgstr ""

#: ../hardware_introduction.rst:449
msgid "Both LEDs off"
msgstr ""

#: ../hardware_introduction.rst:450
msgid "Less than 7.15V"
msgstr ""

#: ../hardware_introduction.rst:452
msgid "When any one of the batteries reaches or exceeds 4.1V while the others are below that threshold, the charging current of that specific battery will be reduced."
msgstr ""
