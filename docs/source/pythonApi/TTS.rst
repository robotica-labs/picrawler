.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

Klasse ``TTS`` - Text-zu-Sprache
================================

**Verwendung**

.. code-block:: python

       from robot_hat import *

       tts = TTS()                       # Ein TTS-Objekt erzeugen
       tts.say('hello')                  # Wort ausgeben

       # tts.write('hi')                 # Wort ausgeben
       tts.lang('en-GB')                 # Sprache √§ndern

       tts.supported_lang()              # Unterst√ºtzte Sprachen abfragen

**Konstruktoren**

``class robot_hat.TTS(engine)``: Erzeugt ein TTS-Objekt. Als ``engine`` k√∂nnen ``"espeak"``, ``"gtts"`` f√ºr Google TTS oder ``polly`` f√ºr AWS Polly verwendet werden.

**Methoden**

-  ``say`` - Wort √ºber TTS ausgeben.

.. code-block:: python

       TTS.say(words)

-  ``lang`` - Sprache in TTS √§ndern.

.. code-block:: python

       TTS.lang(language)

-  ``supported_lang`` - Alle unterst√ºtzten Sprachen abfragen.

.. code-block:: python

       TTS.supported_lang()

-  Parameteranpassung

.. code-block:: python

       # amp: Amplitude, Lautst√§rke
       # speed: Sprechgeschwindigkeit
       # gap: Pause
       # pitch: Tonh√∂he
       def espeak_params(self, amp=None, speed=None, gap=None, pitch=None)







